
// SassyFilters: helpers
// ---------------------


// Returns a list of all keys in a map.
// ---
// @access private
// ---
// @param {Map} $map
// @param {String} $separator (space) - space | comma | auto
// ---
// @return {List}

@function _map-keys(
  $map,
  $separator: space
) {
  @return join((), map-keys($map), $separator);
}


// Returns a list of all values in a map.
// ---
// @access private
// ---
// @param {Map} $map
// @param {String} $separator: space | comma | auto
// ---
// @return {List}

@function _map-values(
  $map,
  $separator: space
) {
  @return join((), map-values($map), $separator);
}


// Test whether `$value` is empty.
// ---
// @access private
// ---
// @param {*} $value
// ---
// @return {Bool}

@function empty($value) {
  @if not $value
       or $value == ""
       or $value == 0
       or $value == ()
       or length($value) == 0 {
    @return true;
  }
  @return false;
}


// Join `$list` into a string.
// ---
// @access private
// ---
// @param {List} $list - the list to convert
// @param {String} $glue ('') - a string to separate each element of the list
// ---
// @return {String}

@function _join(
  $list,
  $glue: ''
) {
  $length: length($list);
  $result: '';

  @if $length < 1 {
    @return $result;
  }

  @for $i from 1 through $length {
    $result: $result
             + nth($list, $i)
             + if($i != $length, $glue, '');
  }

  @return $result;
}


// A Sass micro-templating function.
// ---
// @access private
// ---
// @param {String} $format
// @param {Arglist | Map} $args
// ---
// @return {String}

@function template(
  $format,
  $args...
) {
  $result: $format;

  @each $key, $value in keywords($args) {
    $token: "{{#{$key}}}";
    $length: str-length($token);
    $index: str-index($result, $token);

    @if $index {
      $result: if($index > 1, str-slice($result, 1, $index - 1), "")
               + $value
               + str-slice($result, ($index + $length));

      @if str-index($result, $token) {
        $result: template($result, $args...);
      }
    }
  }

  @return $result;
}


// Test whether `$value` is containedd between `$min` and `$max`.
// ---
// @access private
// ---
// @param {Number} $min - minimum range value
// @param {Number} $max - maximum range value
// @param {Number} $value - the value to be tested
// ---
// @return {Bool}

@function is-in-range(
  $min,
  $max,
  $value
) {
  @return ($value >= $min) and ($value <= $max);
}


// Clamp `$value` between `$min` and `$max`.
// ---
// @access private
// ---
// @param {Number} $min - minimum range value
// @param {Number} $max - maximum range value
// @param {Number} $value - the value to be clamped
// ---
// @return {Number}

@function clamp(
  $min,
  $max,
  $value
) {
  @return if($value > $max, $max, if($value < $min, $min, $value));
}


// Logs an error at `$pointer` if `$value` is not in `$range`.
// ---
// @access private
// ---
// @param {String} $pointer - caller function/mixin name
// @param {List} $range - range the value must be contained in
// @param {Number} $value - the value to be tested
// ---
// @return {Bool}

@function check-in-range(
  $pointer,
  $range,
  $value
) {
  $min: nth($range, 1);
  $max: nth($range, 2);

  @if not is-in-range($min, $max, $value) {
    @warn "ERROR::#{$pointer}::$value must be in range [#{$min}, #{$max}]; #{$value} given.";
    @return false;
  }

  @return true;
}

// @access private

@mixin check-in-range($pointer, $range, $value) {
  $in-range: check-in-range($pointer, $range, $value);
}


// Capitalize string.
// ---
// @access private
// ---
// @param {String} $string
// ---
// @return {String}

@function capitalize(
  $string
) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}
