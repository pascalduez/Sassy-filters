
// SassyFilters: helpers
// ---------------------


// Returns a list of all keys in a map.
// -----------------------------------------------------------------------------
// @param [map] $map
// @param [string] $separator: space | comma | auto
// -----------------------------------------------------------------------------
// @return [list]

@function _map-keys($map, $separator: space) {
  @return join((), map-keys($map), $separator);
}


// Returns a list of all values in a map.
// -----------------------------------------------------------------------------
// @param [map] $map
// @param [string] $separator: space | comma | auto
// -----------------------------------------------------------------------------
// @return [list]

@function _map-values($map, $separator: space) {
  @return join((), map-values($map), $separator);
}


// Test whether `$value` is empty.
// -----------------------------------------------------------------------------
// @param [literal] $value
// -----------------------------------------------------------------------------
// @return [boolean]

@function empty($value) {
  @if not $value
       or $value == ""
       or $value == 0
       or $value == ()
       or length($value) == 0 {
    @return true;
  }
  @return false;
}


// Join `$list` into a string.
// -----------------------------------------------------------------------------
// @param [list] $list
// @param [string] $glue
// -----------------------------------------------------------------------------
// @return [string]

@function _join($list, $glue: "") {
  $result: "";
  $length: length($list);

  @if $length < 1 {
    @return $result;
  }

  @for $i from 1 through $length {
    $result: $result
             + nth($list, $i)
             + if($i != $length, $glue, "");
  }

  @return $result;
}


// A Sass micro-templating function.
// -----------------------------------------------------------------------------
// @param [string] $format
// @param [arglist | map] $args
// -----------------------------------------------------------------------------
// @return [string]

@function template($format, $args...) {
  $result: $format;

  @each $key, $value in keywords($args) {
    $token: "{{#{$key}}}";
    $length: str-length($token);
    $index: str-index($result, $token);

    @if $index {
      $result: if($index > 1, str-slice($result, 1, $index - 1), "")
               + $value
               + str-slice($result, ($index + $length));

      @if str-index($result, $token) {
        $result: template($result, $args...);
      }
    }
  }

  @return $result;
}


// Test whether `$value` is containedd between `$min` and `$max`.
// -----------------------------------------------------------------------------
// @param [number] $min: minimum range value
// @param [number] $max: maximum range value
// @param [number] $value: the value to be tested
// -----------------------------------------------------------------------------
// @return [boolean]

@function _in-range($min, $max, $value) {
  @return ($value >= $min) and ($value <= $max);
}


// Logs an error at `$pointer` if `$value` is not in `$range`.
// -----------------------------------------------------------------------------
// @param [string] $pointer: caller function/mixin name
// @param [list] $range: range the value must be contained in
// @param [number] $value: the value to be tested
// -----------------------------------------------------------------------------
// @return [boolean]

@function check-in-range($pointer, $range, $value) {
  $min: nth($range, 1);
  $max: nth($range, 2);

  @if not _in-range($min, $max, $value) {
    @warn "ERROR::#{$pointer}::$value must be in range [#{$min}, #{$max}]; #{$value} given.";
    @return false;
  }

  @return true;
}

@mixin check-in-range($pointer, $range, $value) {
  $in-range: check-in-range($pointer, $range, $value);
}


// Capitalize string.
// -----------------------------------------------------------------------------
// @param [string] $string
// -----------------------------------------------------------------------------
// @return [string]

@function capitalize($string) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}
