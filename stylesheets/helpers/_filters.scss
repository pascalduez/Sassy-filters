
// SassyFilters: filters helpers
// -----------------------------


/**
 * Helper: Get and format a single SVG filter.
 * ---
 * @requires template
 * ---
 * @param {String} $function - filter function
 * @param {Arglist} $args - arguments to be passed to the SVG filter
 * ---
 * @return {String}
 */
@function _svg-filter(
  $function,
  $args...
) {
  @if not map-has-key($svg-filters, $function) {
    @warn "`_svg-filter-get`, no filter found for function: #{$function}.";
    @return false;
  }

  @return template(map-get($svg-filters, $function), $args...);
}


/**
 * Helper: IE filter formatting helper
 * ---
 * @requires _join
 * @requires capitalize
 * ---
 * @param {String} $filter - filter name
 * @param {Arglist} $args - filter properties
 * ---
 * @return {String}
 */
@function _ie-filter(
  $filter,
  $args...
) {
  $properties: ();
  $parts: (
    "progid:DXImageTransform.Microsoft.",
    "#{capitalize($filter)}",
    "(",
    "properties",
    ")"
  );

  @each $key, $value in keywords($args) {
    @if type-of($value) == color {
      $value: "'#{ie-hex-str($value)}'";
    }
    $properties: append($properties, "#{$key}=#{$value}");
  }

  $parts: set-nth(
            $parts,
            index($parts, "properties"),
            _join($properties, ", ")
          );

  @return _join($parts);
}


/**
 * Main filters function, used internaly for combining several filters
 * ---
 * @access private
 * ---
 * @param {Map} $filters - a map of filters `(function: (params))`
 * @param {String} $id - filter name, default to function name or 'custom'
 * ---
 * @return {Map} filters output
 */
@function _filters(
  $filters,
  $id
) {
  $output: (
     id: $id,
    css: (),
    svg: (),
     ie: ()
  );

  @each $function, $args in $filters {
    @if function-exist($function) {
      $filter: call("_fn-#{$function}", $args...);

      @each $key in map-keys($filter) {
        $output: map-merge($output,
                  ($key: append(map-get($output, $key), map-get($filter, $key)))
                );
      }
    }
  }

  @return $output;
}


/**
 * Preprocessor: wrap a list of filters into the final SVG string.
 * ---
 * @access private
 * ---
 * @requires template
 * @requires _join
 * ---
 * @param {Map} - $output
 * ---
 * @return {Map}
 */
@function _preprocess-svg-filters(
  $output
) {
  $filters: map-get($output, svg);
  $id: map-get($output, id);
  $wrapper: map-get($svg-wrappers, filter);

  $svg: template(
          $wrapper,
          $filter: _join($filters),
          $id: $id
        );

  @return map-merge($output, (svg: $svg));
}


/**
 * Preprocessor: apply last IE versions formating before printing.
 * ---
 * @access private
 * ---
 * @requires _join
 * ---
 * @param {Map} - $output
 * ---
 * @return {Map}
 */
@function _preprocess-ie-filters(
  $output
) {
  @return map-merge($output, (
      gte-ie8: quote(_join(map-get($output, ie), ", ")),
      lt-ie8: unquote(_join(map-get($output, ie), " "))
    ));
}
