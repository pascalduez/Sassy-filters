
// Filter: drop-shadow
// -------------------


/**
 * `drop-shadow` filter function
 * ---
 * @access private
 * ---
 * @param {Number} $offset-x
 * @param {Number} $offset-y
 * @param {Number} $blur-radius
 * @param {Color} $color
 * @param {Number} $spread-radius (null) - (not implemented yet)
 * ---
 * @return {Map}
 */
@function _fn-drop-shadow(
  $offset-x,
  $offset-y,
  $blur-radius,
  $color,
  $spread-radius: null
) {
  // CSS filter function
  $css: drop-shadow($offset-x $offset-y $blur-radius $color);

  // SVG filter equivalent
  $svg: _svg-filter(
            drop-shadow,
            $offset-x: ($offset-x / 1px),
            $offset-y: ($offset-y / 1px),
            $blur-radius: ($blur-radius / 1px),
            $color: $color
          );

  // IE static filter
  // Glow(Color, Strength)
  // Shadow(color, Direction, Strength)
  $ie: _ie-filter(dropshadow, $OffX: $offset-x, $OffY: $offset-y, $Color: $color);

  @return (
    css: $css,
    svg: $svg,
     ie: $ie
  );
}


/**
 * `drop-shadow` filter mixin
 * ---
 * @requires {mixin} check-in-range
 * @requires {mixin} filters
 * ---
 * @ignore spec drop-shadow() = drop-shadow( <length>{2,3} <color>? )
 * ---
 * @param {Number} $offset-x (0px)
 * @param {Number} $offset-y ($offset-x)
 * @param {Number} $blur-radius (Opx)
 * @param {Color} $color (rgba(0 ,0 , 0, .5))
 */
@mixin drop-shadow(
  $offset-x: 0px,
  $offset-y: $offset-x,
  $blur-radius: 0px,
  $color: rgba(0, 0, 0, .5)
) {
  @include filters((drop-shadow:
                      ($offset-x, $offset-y, $blur-radius, $color)
                  ));
}
