
@import "SassyFilters";

/*
 * Global test styles.
 */

$breakpoints: (
  "small": (min-width: 450px),
  "medium": (min-width: 750px),
  "large": (min-width: 950px)
);

@mixin breakpoint($name) {
  @if map-has-key($breakpoints, $name) {
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }
}

%clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

$box-max-width: 400px;
$box-height: 4em;

body {
  font-family: sans-serif;
  background: PaleTurquoise;
  margin: 0;
}

main {
  width: 90%;
  margin: 0 auto;
}

h1 {
  padding: 0 0 .6em;
  margin: 1em 0 2em;
  border-bottom: 2px solid white;

  a {
    color: white;
    text-decoration: none;
  }
}

h3 {
  color: white;
}

.test {
  margin: 0 0 3em;
}

.test--helpers {
  @extend %clearfix;

  .test {
    line-height: $box-height;
    text-align: center;
    margin: 0 0 1em;

    @include breakpoint("small") {
      width: 30%;
      width: calc((100% - 2em) / 3);
      float: left;
      margin-right: 1em;

      &:last-child {
        margin-right: 0;
      }
    }
  }
}

.test--box {
  max-width: $box-max-width;
  height: $box-height;
  background: white;
}

.test--img {
  @extend %clearfix;

  img {
    width: 100%;
    max-width: $box-max-width;
    height: auto;
    margin: 0 0 1em;

    @include breakpoint("small") {
      width: 48%;
      width: calc((100% - 1em) / 2);
      float: left;
      margin-right: 1em;

      &:last-child {
        margin-right: 0;
      }
    }
  }
}



/*
 * Test SVG helpers
 */
.test--helpers {
  $svgStr: '<svg xmlns="http://www.w3.org/2000/svg">
    <filter id="custom">
      <feGaussianBlur in="SourceGraphic" stdDeviation="1"/>
      <feComponentTransfer>
        <feFuncA tableValues="0 .7" type="table"></feFuncA>
      </feComponentTransfer>
    </filter>
  </svg>';

  .svg-filter {
    @each $encoding in "raw", "escaped", "base64" {
      &--#{$encoding} {
        filter: inline-svg($svgStr, $encoding, "custom");
      }
    }
  }
}



/*
 * Test blur.
 */
.test--blur {
  @include blur(8px);
}


/*
 * Test brightness.
 */
.test--brightness {
  .target {
    @include brightness(3);
  }
}


/*
 * Test contrast.
 */
.test--contrast {
  .target {
    @include contrast(4);
  }
}


/*
 * Test drop-shadow.
 */
.test--drop-shadow {
  @include drop-shadow(3px, 3px, 4px, rgba(0, 0, 0, .5));
}


/*
 * Test grayscale.
 */
.test--grayscale {
  .target {
    @include grayscale(1);
  }
}


/*
 * Test hue-rotate.
 */
.test--hue-rotate {
  .target {
    @include hue-rotate(180deg);
  }
}


/*
 * Test invert.
 */
.test--invert {
  .target {
    @include invert(1);
  }
}


/*
 * Test opacity.
 */
.test--opacity {
  .target {
    @include opacity(.4);
  }
}


/*
 * Test saturate.
 */
.test--saturate {
  .target {
    @include saturate(7);
  }
}


/*
 * Test sepia.
 */
.test--sepia {
  .target {
    @include sepia(1);
  }
}


/*
 * Test multi filters.
 */
.test--multi {
  .target {
    @include filters((
      brightness: 3,
      invert: 1,
      blur: 5px
    ));
  }
}


/*
 * Test svg-filter.
 */
.test--svg-filter {
  $svgStr: '<svg xmlns="http://www.w3.org/2000/svg">
    <filter id="custom">
      <feGaussianBlur in="SourceGraphic" stdDeviation="1"/>
      <feComponentTransfer>
        <feFuncA tableValues="0 .7" type="table"></feFuncA>
      </feComponentTransfer>
    </filter>
  </svg>';

  @include svg-filter($svgStr, "custom");
}


/*
 * Test disable.
 */
.test--disable {
  @include disable-filter(blur);
}
