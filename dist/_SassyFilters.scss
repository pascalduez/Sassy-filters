// SassyFilters – v0.1.2 – 2014-05-16
// https://github.com/pascalduez/SassyFilters
// License: unlicence


// SassyFilters: configuration
// ---------------------------


// Default settings.
$filters-defaults: (

  // Encoding of the SVG filters as data URI: raw | escaped | base64.
  data-type: "raw",

  // Whether to add IE proprietary filters or not.
  ie-support: true

);

// User settings.
$filters-settings: () !default;

// Retreive a configuration item.
@function conf($key) {
  @if not map-has-key($filters-defaults, $key) {
    @warn "No item `#{$key}` found in configuration.";
    @return false;
  }

  @return map-get(map-merge($filters-defaults, $filters-settings), $key);
}


// SassyFilters: SVG filters
// -------------------------


$svg-wrappers: (

  svg:
    '<svg xmlns="http://www.w3.org/2000/svg">{{svg}}</svg>',

  filter:
    '<svg xmlns="http://www.w3.org/2000/svg">
      <filter id="{{id}}">{{filter}}</filter>
    </svg>'

);


// Filters shorthand equivalents
$svg-filters: (

  // Spec: blur
  // <feGaussianBlur stdDeviation="[radius radius]" edgeMode="[edge mode]"/>

  blur:
    '<feGaussianBlur stdDeviation="{{radius}}" edgeMode="none"/>',

  // Spec: brightness:
  // <feComponentTransfer>
  //   <feFuncR type="linear" slope="[amount]"/>
  //   <feFuncG type="linear" slope="[amount]"/>
  //   <feFuncB type="linear" slope="[amount]"/>
  // </feComponentTransfer>

  brightness:
    '<feComponentTransfer>
      <feFuncR type="linear" slope="{{amount}}"/>
      <feFuncG type="linear" slope="{{amount}}"/>
      <feFuncB type="linear" slope="{{amount}}"/>
    </feComponentTransfer>',

  // Spec: contrast
  // <feComponentTransfer>
  //   <feFuncR type="linear" slope="[amount]" intercept="-(0.5 * [amount]) + 0.5"/>
  //   <feFuncG type="linear" slope="[amount]" intercept="-(0.5 * [amount]) + 0.5"/>
  //   <feFuncB type="linear" slope="[amount]" intercept="-(0.5 * [amount]) + 0.5"/>
  // </feComponentTransfer>

  contrast:
    '<feComponentTransfer>
      <feFuncR type="linear" slope="{{slope}}" intercept="{{intercept}}"/>
      <feFuncG type="linear" slope="{{slope}}" intercept="{{intercept}}"/>
      <feFuncB type="linear" slope="{{slope}}" intercept="{{intercept}}"/>
    </feComponentTransfer>',

  // Spec: drop-shadow
  // <feGaussianBlur in="[alpha-channel-of-input]" stdDeviation="[radius]"/>
  // <feOffset dx="[offset-x]" dy="[offset-y]" result="offsetblur"/>
  // <feFlood flood-color="[color]"/>
  // <feComposite in2="offsetblur" operator="in"/>
  // <feMerge>
  //   <feMergeNode/>
  //   <feMergeNode in="[input-image]"/>
  // </feMerge>

  drop-shadow:
    '<feGaussianBlur in="SourceAlpha" stdDeviation="{{blur-radius}}"/>
     <feOffset dx="{{offset-x}}" dy="{{offset-y}}" result="offsetblur"/>
     <feFlood flood-color="{{color}}"/>
     <feComposite in2="offsetblur" operator="in"/>
     <feMerge>
      <feMergeNode/>
      <feMergeNode in="SourceGraphic"/>
    </feMerge>',

  // Spec: grayscale
  // <feColorMatrix type="matrix"
  //  values="(0.2126 + 0.7874 * [1 - amount]) (0.7152 - 0.7152 * [1 - amount]) (0.0722 - 0.0722 * [1 - amount]) 0 0
  //          (0.2126 - 0.2126 * [1 - amount]) (0.7152 + 0.2848 * [1 - amount]) (0.0722 - 0.0722 * [1 - amount]) 0 0
  //          (0.2126 - 0.2126 * [1 - amount]) (0.7152 - 0.7152 * [1 - amount]) (0.0722 + 0.9278 * [1 - amount]) 0 0
  //           0 0 0 1 0"/>

  grayscale:
    '<feColorMatrix type="matrix" values="{{matrix}}"/>',

  // Spec: hue-rotate
  // <feColorMatrix type="hueRotate" values="[angle]"/>

  hue-rotate:
    '<feColorMatrix type="hueRotate" values="{{angle}}"/>',

  // Spec: invert
  // <feComponentTransfer>
  //   <feFuncR type="table" tableValues="[amount] (1 - [amount])"/>
  //   <feFuncG type="table" tableValues="[amount] (1 - [amount])"/>
  //   <feFuncB type="table" tableValues="[amount] (1 - [amount])"/>
  // </feComponentTransfer>

  invert:
    '<feComponentTransfer>
      <feFuncR type="table" tableValues="{{values}}"/>
      <feFuncG type="table" tableValues="{{values}}"/>
      <feFuncB type="table" tableValues="{{values}}"/>
    </feComponentTransfer>',

  // Spec: opacity:
  // <feComponentTransfer>
  //   <feFuncA type="table" tableValues="0 [amount]"/>
  // </feComponentTransfer>

  opacity:
    '<feComponentTransfer>
      <feFuncA type="table" tableValues="0 {{amount}}"/>
    </feComponentTransfer>',

  // Spec: saturate
  // <feColorMatrix type="saturate" values="(1 - [amount])"/>

  saturate:
    '<feColorMatrix type="saturate" values="{{values}}"/>',

  // Spec: sepia
  // <feColorMatrix type="matrix"
  //  values="(0.393 + 0.607 * [1 - amount]) (0.769 - 0.769 * [1 - amount]) (0.189 - 0.189 * [1 - amount]) 0 0
  //          (0.349 - 0.349 * [1 - amount]) (0.686 + 0.314 * [1 - amount]) (0.168 - 0.168 * [1 - amount]) 0 0
  //          (0.272 - 0.272 * [1 - amount]) (0.534 - 0.534 * [1 - amount]) (0.131 + 0.869 * [1 - amount]) 0 0
  //          0 0 0 1 0"/>

  sepia:
    '<feColorMatrix type="matrix" values="{{matrix}}"/>',

);


// SassyFilters: helpers
// ---------------------


// Returns a list of all keys in a map.
// -----------------------------------------------------------------------------
// @param [map] $map
// @param [string] $separator: space | comma | auto
// -----------------------------------------------------------------------------
// @return [list]

@function _map-keys($map, $separator: space) {
  @return join((), map-keys($map), $separator);
}


// Returns a list of all values in a map.
// -----------------------------------------------------------------------------
// @param [map] $map
// @param [string] $separator: space | comma | auto
// -----------------------------------------------------------------------------
// @return [list]

@function _map-values($map, $separator: space) {
  @return join((), map-values($map), $separator);
}


// Test whether `$value` is empty.
// -----------------------------------------------------------------------------
// @param [literal] $value
// -----------------------------------------------------------------------------
// @return [boolean]

@function empty($value) {
  @if not $value
       or $value == ""
       or $value == 0
       or $value == ()
       or length($value) == 0 {
    @return true;
  }
  @return false;
}


// Join `$list` into a string.
// -----------------------------------------------------------------------------
// @param [list] $list
// @param [string] $glue
// -----------------------------------------------------------------------------
// @return [string]

@function _join($list, $glue: "") {
  $result: "";
  $length: length($list);

  @if $length < 1 {
    @return $result;
  }

  @for $i from 1 through $length {
    $result: $result
             + nth($list, $i)
             + if($i != $length, $glue, "");
  }

  @return $result;
}


// A Sass micro-templating function.
// -----------------------------------------------------------------------------
// @param [string] $format
// @param [arglist | map] $args
// -----------------------------------------------------------------------------
// @return [string]

@function template($format, $args...) {
  $result: $format;

  @each $key, $value in keywords($args) {
    $token: "{{#{$key}}}";
    $length: str-length($token);
    $index: str-index($result, $token);

    @if $index {
      $result: if($index > 1, str-slice($result, 1, $index - 1), "")
               + $value
               + str-slice($result, ($index + $length));

      @if str-index($result, $token) {
        $result: template($result, $args...);
      }
    }
  }

  @return $result;
}


// Test whether `$value` is containedd between `$min` and `$max`.
// -----------------------------------------------------------------------------
// @param [number] $min: minimum range value
// @param [number] $max: maximum range value
// @param [number] $value: the value to be tested
// -----------------------------------------------------------------------------
// @return [boolean]

@function _in-range($min, $max, $value) {
  @return ($value >= $min) and ($value <= $max);
}


// Logs an error at `$pointer` if `$value` is not in `$range`.
// -----------------------------------------------------------------------------
// @param [string] $pointer: caller function/mixin name
// @param [list] $range: range the value must be contained in
// @param [number] $value: the value to be tested
// -----------------------------------------------------------------------------
// @return [boolean]

@function check-in-range($pointer, $range, $value) {
  $min: nth($range, 1);
  $max: nth($range, 2);

  @if not _in-range($min, $max, $value) {
    @warn "ERROR::#{$pointer}::$value must be in range [#{$min}, #{$max}]; #{$value} given.";
    @return false;
  }

  @return true;
}

@mixin check-in-range($pointer, $range, $value) {
  $in-range: check-in-range($pointer, $range, $value);
}


// Capitalize string.
// -----------------------------------------------------------------------------
// @param [string] $string
// -----------------------------------------------------------------------------
// @return [string]

@function capitalize($string) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}


// SassyFilters: SVG helpers
// -------------------------


// Format a proper SVG data URI.
// -----------------------------------------------------------------------------
// @param [string] $data: SVG data
// @param [string] $mime-type
// @param [string] $encoding
// @param [string] $fragment: fragment identifier
// -----------------------------------------------------------------------------
// @see https://tools.ietf.org/html/rfc2397
// @see http://www.w3.org/TR/SVG11/linking.html
// data:[<MIME-type>][;charset=<encoding>][;base64],<data>[#fragment]
// -----------------------------------------------------------------------------
// @dependencies `empty()`
// -----------------------------------------------------------------------------
// @return [string]

@function svg-data-uri(
  $data,
  $mime-type: "image/svg+xml",
  $encoding: "charset=utf-8",
  $fragment: ""
) {
  $result: "";
  $parts: (
    "data:",
    $mime-type,
    ";#{$encoding}",
    ",#{$data}",
    "##{$fragment}"
  );

  @each $part in $parts {
    @if not empty($part) and str-length($part) > 1 {
      $result: $result + $part;
    }
  }

  @return quote($result);
}


// Format and encode an inline SVG.
// -----------------------------------------------------------------------------
// @param [string] $svgStr: stringified SVG
// @param [string] $encoding: data type "raw" | "base64" | "escaped"
// @param [string] $fragment: fragment identifier
// -----------------------------------------------------------------------------
// @dependencies `svg-data()`, `svg-data-uri()`
// -----------------------------------------------------------------------------
// @return [string]

@function inline-svg(
  $svgStr,
  $encoding: conf(data-type),
  $fragment: ""
) {
  $return: "";

  $args: (
    data: svg-data($svgStr, $encoding),
    fragment: $fragment
  );
  @if $encoding == "base64" {
    $args: map-merge($args, (encoding: "base64"));
  }

  $data-uri: svg-data-uri($args...);

  @return url($data-uri);
}


// SassyFilters: filters helpers
// -----------------------------


// Get and format a single SVG filter.
// -----------------------------------------------------------------------------
// @param [string] $function: filter function
// @param [arglist] $args: arguments to be passed to the SVG filter
// -----------------------------------------------------------------------------
// @dependencies `template()`
// -----------------------------------------------------------------------------
// @return [string]

@function _svg-filter(
  $function,
  $args...
) {
  @if not map-has-key($svg-filters, $function) {
    @warn "`_svg-filter-get`, no filter found for function: #{$function}.";
    @return false;
  }

  @return template(map-get($svg-filters, $function), $args...);
}


// IE filter formatting helper
// -----------------------------------------------------------------------------
// @param [filter] $string: filter name
// @param [arglist] $args: filter properties
// -----------------------------------------------------------------------------
// @dependencies `_join()`, `capitalize()`
// -----------------------------------------------------------------------------
// @return [string]

@function _ie-filter(
  $filter,
  $args...
) {
  $properties: ();
  $parts: (
    "progid:DXImageTransform.Microsoft.",
    "#{capitalize($filter)}",
    "(",
    "properties",
    ")"
  );

  @each $key, $value in keywords($args) {
    @if type-of($value) == color {
      $value: "'#{ie-hex-str($value)}'";
    }
    $properties: append($properties, "#{$key}=#{$value}");
  }

  $parts: set-nth(
            $parts,
            index($parts, "properties"),
            _join($properties, ", ")
          );

  @return _join($parts);
}


// Main filters function, used internaly for combining several filters
// -----------------------------------------------------------------------------
// @param [map] $filters: a map of filters `(function: (params))`
// @param [string] $id: filter name, default to function name or "custom"
// -----------------------------------------------------------------------------
// @print [css] final filters output

@function _filters(
  $filters,
  $id
) {
  $output: (
     id: $id,
    css: (),
    svg: (),
     ie: ()
  );

  @each $function, $args in $filters {
    @if function-exist($function) {
      $filter: call("_fn-#{$function}", $args...);

      @each $key in map-keys($filter) {
        $output: map-merge($output,
                  ($key: append(map-get($output, $key), map-get($filter, $key)))
                );
      }
    }
  }

  @return $output;
}


// Preprocessor: wrap a list of filters into the final SVG string.
// -----------------------------------------------------------------------------
// @param [map]: $output
// -----------------------------------------------------------------------------
// @dependencies `template()`, `_join()`
// -----------------------------------------------------------------------------
// @return [map]

@function _preprocess-svg-filters(
  $output
) {
  $filters: map-get($output, svg);
  $id: map-get($output, id);
  $wrapper: map-get($svg-wrappers, filter);

  $svg: template(
          $wrapper,
          $filter: _join($filters),
          $id: $id
        );

  @return map-merge($output, (svg: $svg));
}


// Preprocessor: apply last IE versions formating before printing.
// -----------------------------------------------------------------------------
// @param [map]: $output
// -----------------------------------------------------------------------------
// @dependencies `_join()`
// -----------------------------------------------------------------------------
// @return [map]

@function _preprocess-ie-filters(
  $output
) {
  @return map-merge($output, (
      gte-ie8: quote(_join(map-get($output, ie), ", ")),
      lt-ie8: unquote(_join(map-get($output, ie), " "))
    ));
}


// SassyFilters: filters output
// ----------------------------


// Ouput mixin, print final cross-browser filters declarations.
// -----------------------------------------------------------------------------
// @param [map] $output: a map of browser specific filters
// -----------------------------------------------------------------------------
// @print [css] final filters output

@mixin output(
  $output
) {
  //
  // Webkit, Blink
  //
  -webkit-filter: map-get($output, css);

  //
  // Gecko
  //
  $output: _preprocess-svg-filters($output);

  filter: inline-svg(
            $svgStr: map-get($output, svg),
            $fragment: map-get($output, id)
          );

  //
  // IE
  //
  $ie-support: conf(ie-support)
               and map-has-key($output, ie)
               and not empty(map-get($output, ie));

  @if $ie-support {
    $output: _preprocess-ie-filters($output);

    // IE 8+
    -ms-filter: map-get($output, gte-ie8);
    // IE < 8
    filter: map-get($output, lt-ie8);
  }
}


// SassyFilters: filters output
// ----------------------------


// Main filters mixin, used internaly or for combining several filters
// -----------------------------------------------------------------------------
// @param [map] $filters: a map of filters `(function: (params,))`
// @param [string] $id: filter name, default to function name or "custom"
// -----------------------------------------------------------------------------
// @print [css] final filters output

@mixin filters(
  $filters,
  $id: null
) {
  @if type-of($filters) != map {
    @warn "`filters` mixin, `filters` argument must be a map.
            #{type-of($value)} given.";
  }

  $id: if(length($filters) == 1, map-keys($filters), $id or "custom");

  $output: _filters($filters, $id);

  @include output($output);
}


// SassyFilters: SVG filter helper
// -------------------------------


// Helper mixin to embed a cutom SVG filter.
// -----------------------------------------------------------------------------
// @param [string] $svgStr: stringified SVG
// @param [string] $fragment: fragment identifier
// @param [string] $encoding: data type "raw" | "base64" | "escaped"
// -----------------------------------------------------------------------------
// @dependencies `inline-svg`
// -----------------------------------------------------------------------------
// @print [css] filter declaration

@mixin svg-filter(
  $svgStr,
  $fragment,
  $encoding: conf(data-type)
) {
  filter: inline-svg($svgStr, $encoding, $fragment);
}


// SassyFilters: disable filter
// ----------------------------


@mixin disable-filter(
  $function: null
) {
  -webkit-filter: none;
      -ms-filter: none;
          filter: none;

  @if conf(ie-support) and $function {
    $ie-filter: _ie-filter($function, $enabled: false);
    -ms-filter: quote($ie-filter);
    filter: unquote($ie-filter);
  }
}


// filter: blur
// ------------


// @private blur `filter` function
// -----------------------------------------------------------------------------
// @param [number]: $radius
// -----------------------------------------------------------------------------
// @dependencies `_svg-filter`, `_ie-filter`
// -----------------------------------------------------------------------------
// @return [map]

@function _fn-blur(
  $radius
) {
  // CSS filter function
  $css: blur($radius);

  // SVG filter equivalent
  $svg: _svg-filter(blur, $radius: ($radius / 1px));

  // IE static filter
  $ie: _ie-filter(blur, $pixelRadius: ($radius / 1px));

  @return (
    css: $css,
    svg: $svg,
     ie: $ie
  );
}


// @public `blur` filter mixin
// -----------------------------------------------------------------------------
// @spec blur() = blur( <length> )
// -----------------------------------------------------------------------------
// @param [number]: $radius
// -----------------------------------------------------------------------------
// @print [css]

@mixin blur(
  $radius: 0px
) {
  @include check-in-range(blur, 0 10, $radius);

  @include filters((blur: $radius));
}


//
// filter: brightness
// ------------------


// @private `brightness` filter function
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @dependencies `_svg-filter`, `_ie-filter`
// -----------------------------------------------------------------------------
// @return [map]

@function _fn-brightness(
  $value
) {
  // CSS filter function
  $css: brightness($value);

  // SVG filter equivalent
  $svg: _svg-filter(brightness, $amount: $value);

  // IE static filter
  // @todo: needs a behavior
  // progid:DXImageTransform.Microsoft.Light().addAmbient(255, 255, 255, $value)
  // $ie: _ie-filter(light);

  @return (
    css: $css,
    svg: $svg
  );
}


// @public `brightness` filter mixin
// -----------------------------------------------------------------------------
// @spec brightness() = brightness( [ <number> | <percentage> ] )
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @print [css]

@mixin brightness(
  $value: 1
) {
  @include check-in-range(brightness, 0 10, $value);

  @include filters((brightness: $value));
}


// filter: contrast
// ----------------


// @private contrast filter function
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @dependencies `_svg-filter`, `_ie-filter`
// -----------------------------------------------------------------------------
// @return [map]

@function _fn-contrast(
  $value
) {
  // CSS filter function
  $css: contrast($value);

  // SVG filter equivalent
  $svg: _svg-filter(contrast, $slope: $value, $intercept: (-(0.5 * $value) + 0.5));

  // IE static filter
  // @todo: needs a behavior
  // $ie: _ie-filter(light);

  @return (
    css: $css,
    svg: $svg
  );
}


// @public `contrast` filter mixin
// -----------------------------------------------------------------------------
// @spec contrast() = contrast( [ <number> | <percentage> ] )
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @print [css]

@mixin contrast(
  $value: 1
) {
  @include check-in-range(contrast, 0 10, $value);

  @include filters((contrast: $value));
}


// Filter: drop-shadow
// -------------------


// @private `drop-shadow` filter function
// -----------------------------------------------------------------------------
// @param [number]: $offset-x
// @param [number]: $offset-y
// @param [number]: $blur-radius
// @param [color]: $color
// @param [number]: $spread-radius (not implemented yet)
// -----------------------------------------------------------------------------
// @dependencies `_svg-filter`, `_ie-filter`
// -----------------------------------------------------------------------------
// @return [map]

@function _fn-drop-shadow(
  $offset-x,
  $offset-y,
  $blur-radius,
  $color,
  $spread-radius: null
) {
  // CSS filter function
  $css: drop-shadow($offset-x $offset-y $blur-radius $color);

  // SVG filter equivalent
  $svg: _svg-filter(
            drop-shadow,
            $offset-x: ($offset-x / 1px),
            $offset-y: ($offset-y / 1px),
            $blur-radius: ($blur-radius / 1px),
            $color: $color
          );

  // IE static filter
  // Glow(Color, Strength)
  // Shadow(color, Direction, Strength)
  $ie: _ie-filter(dropshadow, $OffX: $offset-x, $OffY: $offset-y, $Color: $color);

  @return (
    css: $css,
    svg: $svg,
     ie: $ie
  );
}


// @public `drop-shadow` filter mixin
// -----------------------------------------------------------------------------
// @spec drop-shadow() = drop-shadow( <length>{2,3} <color>? )
// -----------------------------------------------------------------------------
// @param [number]: $offset-x
// @param [number]: $offset-y
// @param [number]: $blur-radius
// @param [color]: $color
// -----------------------------------------------------------------------------
// @print [css]

@mixin drop-shadow(
  $offset-x: 0px,
  $offset-y: $offset-x,
  $blur-radius: 0px,
  $color: rgba(0, 0, 0, .5)
) {
  @include filters((drop-shadow:
                      ($offset-x, $offset-y, $blur-radius, $color)
                  ));
}


// filter: grayscale
// -----------------


// @private `grayscale` filter function
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @dependencies `_svg-filter`, `_ie-filter`
// -----------------------------------------------------------------------------
// @return [map]

@function _fn-grayscale(
  $value
) {
  // CSS filter function
  $css: grayscale($value);

  // SVG filter equivalent
  $matrix:
    (0.2126 + 0.7874 * (1 - $value)), (0.7152 - 0.7152 * (1 - $value)), (0.0722 - 0.0722 * (1 - $value)), 0 0,
    (0.2126 - 0.2126 * (1 - $value)), (0.7152 + 0.2848 * (1 - $value)), (0.0722 - 0.0722 * (1 - $value)), 0 0,
    (0.2126 - 0.2126 * (1 - $value)), (0.7152 - 0.7152 * (1 - $value)), (0.0722 + 0.9278 * (1 - $value)), 0 0,
     0 0 0 1 0;

  $svg: _svg-filter(grayscale, $matrix: _join($matrix, " "));

  // IE static filter
  $ie: _ie-filter(basicImage, $grayscale: 1);

  @return (
    css: $css,
    svg: $svg,
     ie: $ie
  );
}


// @public `grayscale` filter mixin
// -----------------------------------------------------------------------------
// @spec grayscale() = grayscale( [ <number> | <percentage> ] )
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @print [css]

@mixin grayscale(
  $value: 0
) {
  @include check-in-range(grayscale, 0 1, $value);

  @include filters((grayscale: $value));
}


// filter: hue-rotate
// ------------------


// @private `hue-rotate` filter function
// -----------------------------------------------------------------------------
// @param [number]: $angle
// -----------------------------------------------------------------------------
// @dependencies `_svg-filter`, `_ie-filter`
// -----------------------------------------------------------------------------
// @return [map]

@function _fn-hue-rotate(
  $angle
) {
  // CSS filter function
  $css: hue-rotate($angle);

  // SVG filter equivalent
  $svg: _svg-filter(hue-rotate, $angle: ($angle / 1deg));

  // IE static filter
  // @todo: needs a behavior
  // $ie: _ie-filter(light);

  @return (
    css: $css,
    svg: $svg
  );
}


// @public `hue-rotate` filter mixin
// -----------------------------------------------------------------------------
// @spec hue-rotate() = hue-rotate( <angle> )
// -----------------------------------------------------------------------------
// @param [number]: $angle
// -----------------------------------------------------------------------------
// @print [css]

@mixin hue-rotate(
  $angle: 0deg
) {
  @include check-in-range(hue-rotate, 0 360, $angle);

  @include filters((hue-rotate: $angle));
}


// filter: invert
// --------------


// @private `invert` filter function
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @dependencies `_svg-filter`, `_ie-filter`
// -----------------------------------------------------------------------------
// @return [map]

@function _fn-invert(
  $value
) {
  // CSS filter function
  $css: invert($value);

  // SVG filter equivalent
  $svg: _svg-filter(invert, $values: ($value (1 - $value)));

  // IE static filter
  $ie: _ie-filter(invert, $invert: 1);

  @return (
    css: $css,
    svg: $svg,
     ie: $ie
  );
}


// @public `invert` filter mixin
// -----------------------------------------------------------------------------
// @spec invert() = invert( [ <number> | <percentage> ] )
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @print [css]

@mixin invert(
  $value: 0
) {
  @include check-in-range(invert, 0 1, $value);

  @include filters((invert: $value));
}


// filter: opacity
// ---------------


// @private `opacity` filter function
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @dependencies `_svg-filter`, `_ie-filter`
// -----------------------------------------------------------------------------
// @return [map]

@function _fn-opacity(
  $value
) {
  // CSS filter function
  $css: opacity($value);

  // SVG filter equivalent
  $svg: _svg-filter(opacity, $amount: $value);

  // IE static filter
  $ie: _ie-filter(BasicImage, $opacity: $value);

  @return (
    css: $css,
    svg: $svg,
     ie: $ie
  );
}


// @public `opacity` filter mixin
// -----------------------------------------------------------------------------
// @spec opacity() = opacity( [ <number> | <percentage> ] )
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @print [css]

@mixin opacity(
  $value: 1
) {
  @include check-in-range(opacity, 0 1, $value);

  @include filters((opacity: $value));
}


// filter: saturate
// ----------------


// @private `saturate` filter function
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @dependencies `_svg-filter`, `_ie-filter`
// -----------------------------------------------------------------------------
// @return [map]

@function _fn-saturate(
  $value
) {
  // CSS filter function
  $css: saturate($value);

  // SVG filter equivalent
  $svg: _svg-filter(saturate, $values: $value);

  // IE static filter
  // @todo: needs a behavior
  // $ie: _ie-filter(light);

  @return (
    css: $css,
    svg: $svg
  );
}


// @public `saturate` filter mixin
// -----------------------------------------------------------------------------
// @spec saturate() = saturate( [ <number> | <percentage> ] )
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @print [css]

@mixin saturate(
  $value: 1
) {
  @include check-in-range(saturate, 0 10, $value);

  @include filters((saturate: $value));
}


// filter: sepia
// -------------


// @private `sepia` filter function
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @dependencies `_svg-filter`, `_ie-filter`
// -----------------------------------------------------------------------------
// @return [map]

@function _fn-sepia(
  $value
) {
  // CSS filter function
  $css: sepia($value);

  // SVG filter equivalent
  $matrix:
    (0.393 + 0.607 * (1 - $value)), (0.769 - 0.769 * (1 - $value)), (0.189 - 0.189 * (1 - $value)), 0 0,
    (0.349 - 0.349 * (1 - $value)), (0.686 + 0.314 * (1 - $value)), (0.168 - 0.168 * (1 - $value)), 0 0,
    (0.272 - 0.272 * (1 - $value)), (0.534 - 0.534 * (1 - $value)), (0.131 + 0.869 * (1 - $value)), 0 0,
     0 0 0 1 0;

  $svg: _svg-filter(sepia, $matrix: _join($matrix, " "));

  // IE static filter
  // @todo: needs a behavior
  // $ie: _ie-filter(light);

  @return (
    css: $css,
    svg: $svg
  );
}


// @public `sepia` filter mixin
// -----------------------------------------------------------------------------
// @spec sepia() = sepia( [ <number> | <percentage> ] )
// -----------------------------------------------------------------------------
// @param [number]: $value
// -----------------------------------------------------------------------------
// @print [css]

@mixin sepia(
  $value: 0
) {
  @include check-in-range(sepia, 0 1, $value);

  @include filters((sepia: $value));
}
