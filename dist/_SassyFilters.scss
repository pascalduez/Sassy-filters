/*! sassyfilters – v0.0.4 – 2014-04-22 */


$filters-data-type: "raw" !default;
$filters-ie-support: true !default;



$svg-wrapper: '<svg xmlns="http://www.w3.org/2000/svg"><filter id="{{id}}">{{filter}}</filter></svg>';

// https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html#ShorthandEquivalents

$svg-filters: (

  grayscale-tpl:
    '<feColorMatrix type="matrix"
        values="(0.2126 + 0.7874 * (1 - {{amount}})) (0.7152 - 0.7152 * (1 - {{amount}})) (0.0722 - 0.0722 * (1 - {{amount}})) 0 0
                (0.2126 - 0.2126 * (1 - {{amount}})) (0.7152 + 0.2848 * (1 - {{amount}})) (0.0722 - 0.0722 * (1 - {{amount}})) 0 0
                (0.2126 - 0.2126 * (1 - {{amount}})) (0.7152 - 0.7152 * (1 - {{amount}})) (0.0722 + 0.9278 * (1 - {{amount}})) 0 0
                 0 0 0 1 0"/>',

  grayscale:
    '<feColorMatrix type="matrix" values="{{matrix}}"/>',

  sepia-tpl:
    '<feColorMatrix type="matrix"
        values="(0.393 + 0.607 * (1 - {{amount}})) (0.769 - 0.769 * (1 - {{amount}})) (0.189 - 0.189 * (1 - {{amount}})) 0 0
                (0.349 - 0.349 * (1 - {{amount}})) (0.686 + 0.314 * (1 - {{amount}})) (0.168 - 0.168 * (1 - {{amount}})) 0 0
                (0.272 - 0.272 * (1 - {{amount}})) (0.534 - 0.534 * (1 - {{amount}})) (0.131 + 0.869 * (1 - {{amount}})) 0 0
                 0 0 0 1 0"/>',

  sepia:
    '<feColorMatrix type="matrix" values="{{matrix}}"/>',

  saturate-tpl:
    '<feColorMatrix type="saturate" values="(1 - {{amount}})"/>',

  saturate:
    '<feColorMatrix type="saturate" values="{{values}}"/>',

  hue-rotate:
    '<feColorMatrix type="hueRotate" values="{{angle}}"/>',

  invert-tpl:
    '<feComponentTransfer>
      <feFuncR type="table" tableValues="{{amount}} (1 - {{amount}})"/>
      <feFuncG type="table" tableValues="{{amount}} (1 - {{amount}})"/>
      <feFuncB type="table" tableValues="{{amount}} (1 - {{amount}})"/>
    </feComponentTransfer>',

  invert:
    '<feComponentTransfer>
      <feFuncR type="table" tableValues="{{values}}"/>
      <feFuncG type="table" tableValues="{{values}}"/>
      <feFuncB type="table" tableValues="{{values}}"/>
    </feComponentTransfer>',

  opacity:
    '<feComponentTransfer>
      <feFuncA type="table" tableValues="0 {{amount}}"/>
    </feComponentTransfer>',

  brightness:
    '<feComponentTransfer>
      <feFuncR type="linear" slope="{{amount}}"/>
      <feFuncG type="linear" slope="{{amount}}"/>
      <feFuncB type="linear" slope="{{amount}}"/>
    </feComponentTransfer>',

  contrast-tpl:
    '<feComponentTransfer>
      <feFuncR type="linear" slope="{{amount}}" intercept="-(0.5 * {{amount}}) + 0.5"/>
      <feFuncG type="linear" slope="{{amount}}" intercept="-(0.5 * {{amount}}) + 0.5"/>
      <feFuncB type="linear" slope="{{amount}}" intercept="-(0.5 * {{amount}}) + 0.5"/>
    </feComponentTransfer>',

  contrast:
    '<feComponentTransfer>
      <feFuncR type="linear" slope="{{slope}}" intercept="{{intercept}}"/>
      <feFuncG type="linear" slope="{{slope}}" intercept="{{intercept}}"/>
      <feFuncB type="linear" slope="{{slope}}" intercept="{{intercept}}"/>
    </feComponentTransfer>',

  blur:
    '<feGaussianBlur stdDeviation="{{radius}}" edgeMode="none"/>',

  drop-shadow:
    '<feGaussianBlur in="SourceAlpha" stdDeviation="{{blur-radius}}"/>
     <feOffset dx="{{offset-x}}" dy="{{offset-y}}" result="offsetblur"/>
     <feFlood flood-color="{{color}}"/>
     <feComposite in2="offsetblur" operator="in"/>
     <feMerge>
      <feMergeNode/>
      <feMergeNode in="SourceGraphic"/>
    </feMerge>'

);


// Push new entry to `$map`
// --------------------------------------------------------------------------------
// @param [map] $map
// @param $key
// @param $value
// --------------------------------------------------------------------------------
// @return [map]

@function _map-set($map, $key, $value) {
  @return map-merge($map, ($key: $value));
}



// Remove unit from `$number`
// --------------------------------------------------------------------------------
// @param [number] $number
// --------------------------------------------------------------------------------
// @return [number]

@function _strip-unit($number) {
  @return $number / ($number * 0 + 1);
}



// Join `$list` into a string
// --------------------------------------------------------------------------------
// @param [list] $list
// @param [string] $glue
// --------------------------------------------------------------------------------
// @return [string]

@function _join($list, $glue: "") {
  $result: "";

  @if length($list) < 1 {
    @return $result;
  }

  @for $i from 1 through length($list) {
    $result: $result + nth($list, $i) + if($i != length($list), $glue, "");
  }

  @return $result;
}



// A Sass micro-templating function.
// --------------------------------------------------------------------------------
// @param [string] $format
// @param [arglist] $args
// --------------------------------------------------------------------------------
// @return [string]

@function template($format, $args...) {
  $result: $format;

  @each $key, $value in keywords($args) {
    $token: "{{#{$key}}}";
    $length: str-length($token);
    $index: str-index($result, $token);

    @if not $index { @return $result; }

    @if $index {
      $result: str-slice($result, 1, $index - 1) + $value + str-slice($result, ($index + $length));

      @if str-index($result, $token) {
        $result: template($result, $args...);
      }
    }
  }

  @return $result;
}



// Test whether `$value` is containedd between `$min` and `$max`
// --------------------------------------------------------------------------------
// @param [number] $min: minimum range value
// @param [number] $max: maximum range value
// @param [number] $value: the value to be tested
// --------------------------------------------------------------------------------
// @return [boolean]

@function _in-range($min, $max, $value) {
  @return ($value >= $min) and ($value <= $max);
}



// Logs an error at `$pointer` if `$value` is not in `$range`
// --------------------------------------------------------------------------------
// @param [string] $pointer: caller function/mixin name
// @param [list] $range: range the value must be contained in
// @param [number] $value: the value to be tested
// --------------------------------------------------------------------------------
// @return [boolean]

@function check-in-range($pointer, $range, $value) {
  $min: nth($range, 1);
  $max: nth($range, 2);

  @if not _in-range($min, $max, $value) {
    @warn "ERROR::#{$pointer}::$value must be in range [#{$min}, #{$max}]; #{$value} given.";
    @return false;
  }

  @return true;
}



// Logs an error at `$pointer` if `$value` is not of type `$type`
// --------------------------------------------------------------------------------
// @param [string] $pointer: caller function/mixin name
// @param [base] $value: the value to inspect
// @param [string] $type: the unquoted string name of the value’s type
// --------------------------------------------------------------------------------
// @return [boolean]

@function check-typeof($pointer, $value, $type) {
  @if type-of($value) != $type {
    @warn "ERROR::#{$pointer}::$value must be of type #{$type}; #{type-of($value)} given.";
    @return false;
  }

  @return true;
}



// Capitalize string
// --------------------------------------------------------------------------------
// @param [string] $string
// --------------------------------------------------------------------------------
// @return [string]

@function capitalize($string) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}



// IE filters formatting helper
// --------------------------------------------------------------------------------
// @param [filter] $string: filter name
// @param [arglist] $args: filter properties
// --------------------------------------------------------------------------------
// @return [string]

@function _ie-filter($filter, $args...) {
  $result: ();
  $properties: ();

  $result: append($result, "progid:DXImageTransform.Microsoft.#{capitalize($filter)}(");

  @each $key, $value in keywords($args) {
    @if type-of($value) == color {
      $value: "'#{ie-hex-str($value)}'";
    }
    $properties: append($properties, "#{$key}=#{$value}");
  }

  $result: append($result, _join($properties, ", "));
  $result: append($result, ")");

  @return _join($result);
}


@mixin ie-filter($filter, $args...) {
  @if $filters-ie-support {
    // IE 8+
    -ms-filter: quote(_ie-filter($filter, $args...));
    // IE < 8
    filter: unquote(_ie-filter($filter, $args...));
  }
}


// Format a proper url() SVG filter
// --------------------------------------------------------------------------------
// @param [string] $id: filter id
// @param [string] $data: inlined SVG
// @param [string] $mime-type
// @param [string] $encoding
// --------------------------------------------------------------------------------
// @return [string]

@function _svg-filter-url($id: "", $svgStr: "", $mime-type: "image/svg+xml", $encoding: "charset=utf-8") {
  $parts: ("data:");

  @if $mime-type and $mime-type != "" {
    $parts: append($parts, "#{$mime-type};");
  }
  @if $encoding and $encoding != "" {
    $parts: append($parts, "#{$encoding},");
  }
  $parts: append($parts, $svgStr);
  @if $id and $id != "" {
    $parts: append($parts, "##{$id}");
  }

  @return url(_join($parts));
}



// Format and encode a proper inline SVG data.
// --------------------------------------------------------------------------------
// @param [string] $id: filter id
// @param [string] $svgStr: stringified SVG
// @param [string] $type: data type "raw" | "base64" | "escape"
// --------------------------------------------------------------------------------
// @return [string]

@function _svg-filter-data($id, $svgStr, $type: "raw") {
  @if type-of($svgStr) != "string" {
    @warn "`_svg-data` function expecting a string for $svgStr; #{type-of($svgStr)} given.";
    @return false;
  }

  $return: "";

  @if $type == "base64" {
    $data: inline-svg($svgStr, true);
    $return: _svg-filter-url($id, $data, $encoding: "base64");
  }
  @else if $type == "escape" {
    $data: inline-svg($svgStr, false, true);
    $return: _svg-filter-url($id, $data);
  }
  @else {
    $data: inline-svg($svgStr);
    $return: _svg-filter-url($id, $data);
  }

  @return $return;
}



// Get and format an SVG filter.
// --------------------------------------------------------------------------------
// @param [string] $id: filter id
// @param [arglist] $args: arguments to be passed to the SVG filter
// --------------------------------------------------------------------------------
// @return [string]

@function _svg-filter-get($id, $args...) {
  $tpl: map-get($svg-filters, $id);
  @return template($svg-wrapper, $id: $id, $filter: template($tpl, $args...));
}



// Format a proper inline SVG filter as data uri.
// --------------------------------------------------------------------------------
// @param [string] $id: filter id
// @param [arglist] $args: arguments to be passed to the SVG filter
// --------------------------------------------------------------------------------
// @return [string]

@function svg-filter($id, $args...) {
  @if not map-has-key($svg-filters, $id) {
    @warn "`svg-filter` function, no filter found for id: #{$id}.";
    @return false;
  }

  $return: "";
  $svgStr: _svg-filter-get($id, $args...);
  $return: _svg-filter-data($id, $svgStr, $type: $filters-data-type);

  @return $return;
}




//
// filter: blur
//
@mixin blur($radius: 0px) {

  $in-range: check-in-range(blur, 0 10, $radius);

  // Webkit, Blink
  -webkit-filter: blur($radius);

  // Gecko
  filter: svg-filter(blur, $radius: _strip-unit($radius));

  // IE
  @include ie-filter(Blur, $pixelRadius: _strip-unit($radius));
}


//
// filter: brightness
//
@mixin brightness($value: 1) {

  $in-range: check-in-range(brightness, 0 10, $value);

  // Webkit, Blink
  -webkit-filter: brightness($value);

  // Gecko
  filter: svg-filter(brightness, $amount: $value);

  // IE
  // Needs a behavior
  // $ie-filter: "progid:DXImageTransform.Microsoft.Light().addAmbient(255, 255, 255, #{$value})";
  // @include ie-filter(Light);
}


//
// filter: contrast
//
@mixin contrast($value: 1) {

  $in-range: check-in-range(contrast, 0 10, $value);

  // Webkit, Blink
  -webkit-filter: contrast($value);

  // Gecko
  filter: svg-filter(contrast, $slope: $value, $intercept: (-(0.5 * $value) + 0.5));

  // IE
  // Needs a behavior
  // @include ie-filter(Light);
}


//
// filter: custom
//
@mixin custom() {
  //
  // http://docs.webplatform.org/wiki/css/functions/custom
  //
}


//
// Filter: drop-shadow.
//
@mixin drop-shadow($offset-x: 0px, $offset-y: $offset-x, $blur-radius: 0px, $color: #000, $spread-radius: 0px) {

  // Webkit, Blink
  -webkit-filter: drop-shadow($offset-x $offset-y $blur-radius $color);

  // Gecko
  filter: svg-filter(drop-shadow,
                     $offset-x: _strip-unit($offset-x),
                     $offset-y: _strip-unit($offset-y),
                     $blur-radius: _strip-unit($blur-radius),
                     $color: $color);

  // IE
  // progid:DXImageTransform.Microsoft.Dropshadow(OffX=#{$offset-x}, OffY=#{$offset-y}, Color='#{ie-hex-str($color)}')
  // progid:DXImageTransform.Microsoft.Glow(Color='#{ie-hex-str($color)}', Strength=#{$blur-radius})
  // pprogid:DXImageTransform.Microsoft.Shadow(color='#{ie-hex-str($color)}', Direction=#{$offset-x * 100}, Strength=#{$blur-radius * 10})
  @include ie-filter(Dropshadow, $OffX: $offset-x, $OffY: $offset-y, $Color: $color);
}


//
// multiple filters.
//
@mixin filters() {
  //
  // Helper mixin to add multiple filters.
  //
}


//
// filter: greyscale
//
@mixin grayscale($value: 0) {

  $in-range: check-in-range(grayscale, 0 1, $value);

  // Webkit, Blink
  -webkit-filter: grayscale($value);

  // Gecko
  $matrix: (0.2126 + 0.7874 * (1 - $value)), (0.7152 - 0.7152 * (1 - $value)), (0.0722 - 0.0722 * (1 - $value)), 0 0,
           (0.2126 - 0.2126 * (1 - $value)), (0.7152 + 0.2848 * (1 - $value)), (0.0722 - 0.0722 * (1 - $value)), 0 0,
           (0.2126 - 0.2126 * (1 - $value)), (0.7152 - 0.7152 * (1 - $value)), (0.0722 + 0.9278 * (1 - $value)), 0 0,
            0 0 0 1 0;

  filter: svg-filter(grayscale, $matrix: _join($matrix, " "));

  // IE
  @include ie-filter(BasicImage, $grayscale: 1);
}


//
// filter: hue-rotate
//
@mixin hue-rotate($angle: 0deg) {

  $in-range: check-in-range(hue-rotate, 0 360, $angle);

  // Webkit, Blink
  -webkit-filter: hue-rotate($angle);

  // Gecko
  filter: svg-filter(hue-rotate, $angle: _strip-unit($angle));

  // IE
  // Needs a behavior
  // @include ie-filter(Light);
}


//
// filter: invert
//
@mixin invert($value: 0) {

  $in-range: check-in-range(invert, 0 1, $value);

  // Webkit, Blink
  -webkit-filter: invert($value);

  // Gecko
  filter: svg-filter(invert, $values: ($value (1 - $value)));

  // IE
  @include ie-filter(BasicImage, $invert: 1);
}


//
// filter: opacity
//
@mixin opacity($value: 1) {

  $in-range: check-in-range(opacity, 0 1, $value);

  // Webkit, Blink
  -webkit-filter: opacity($value);

  // Gecko
  filter: svg-filter(opacity, $amount: $value);

  // IE
  @include ie-filter(BasicImage, $opacity: $value);
}


//
// filter: saturate
//
@mixin saturate($value: 1) {

  $in-range: check-in-range(saturate, 0 10, $value);

  // Webkit, Blink
  -webkit-filter: saturate($value);

  // Gecko
  filter: svg-filter(saturate, $values: $value);

  // IE
  // Needs a behavior
  // @include ie-filter(Light);
}


//
// filter: sepia
//
@mixin sepia($value: 1) {

  $in-range: check-in-range(sepia, 0 1, $value);

  // Webkit, Blink
  -webkit-filter: sepia($value);

  // Gecko
  $matrix: (0.393 + 0.607 * (1 - $value)), (0.769 - 0.769 * (1 - $value)), (0.189 - 0.189 * (1 - $value)), 0 0,
           (0.349 - 0.349 * (1 - $value)), (0.686 + 0.314 * (1 - $value)), (0.168 - 0.168 * (1 - $value)), 0 0,
           (0.272 - 0.272 * (1 - $value)), (0.534 - 0.534 * (1 - $value)), (0.131 + 0.869 * (1 - $value)), 0 0,
            0 0 0 1 0;

  filter: svg-filter(sepia, $matrix: _join($matrix, " "));

  // IE
  // Needs a behavior
  // @include ie-filter(Light);
}
